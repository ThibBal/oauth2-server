<?php
/*
* This file has been automatically generated by Mouf/ORM.
* DO NOT edit this file, as it might be overwritten.
* If you need to perform changes, edit the Mouf\AccountBundle\Entity\OauthClientDao class instead!
*/
namespace Mouf\OauthServer\Model\DAOs;

use Mouf\Database\DAOInterface;
use Mouf\Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Mouf\AccountBundle\Entity\OauthClient;

/**
* The Mouf\AccountBundle\Entity\OauthClientBaseDao class will maintain the persistance of Mouf\AccountBundle\Entity\OauthClient class into the oauth_clients table.
*
*/
class Mouf\AccountBundle\Entity\OauthClientBaseDao extends EntityRepository implements DAOInterface {

	/**
	 * @param EntityManager $entityManager
	 */
	public function __construct($entityManager){
		parent::__construct($entityManager, $entityManager->getClassMetadata('Mouf\AccountBundle\Entity\OauthClient'));
	}


	/**
	 * Get a new bean record
	 * * @return Mouf\AccountBundle\Entity\OauthClient the new bean object
	 */
	public function create(){
		return new Mouf\AccountBundle\Entity\OauthClient();
	}

	/**
	 * Get a bean by it's Id
	 * @param mixed $id
	 * @return Mouf\AccountBundle\Entity\OauthClient the bean object
	 */
	public function getById($id){
		return $this->find($id);
	}

	/**
	 *
	 * Peforms saving on a bean object
	 * @param mixed bean object
	 */
	public function save($entity){
		$this->getEntityManager()->persist($entity);
	}

	/**
	 * Returns the lis of beans
	 * @return array[Mouf\AccountBundle\Entity\OauthClient] array of bean objects
	 */
	public function getList(){
		return $this->findAll();
	}

	/**
     * Finds only one entity. The criteria must contain all the elements needed to find a unique entity.
     * Throw an exception if more than one entity was found.
     *
     * @param array $criteria
     *
     * @return Mouf\AccountBundle\Entity\OauthClient the bean object
     */
    public function findUniqueBy(array $criteria)
    {
        $result = $this->findBy($criteria);

        if(count($result) == 1){
            return $result[0];
        }elseif(count($result) > 1){
            throw new NonUniqueResultException('More than one Mouf\AccountBundle\Entity\OauthClient was found');
        }else{
           return null;
        }
    }

	
	/**
	 * Wrapper around the magic __call implementations of the findBy[Field] function to get autocompletion
	 * @param mixed $fieldValue the value of the filtered field
	 * @param array|null $orderBy the value of the filtered field
	 * @param int|null $limit the max elements to be returned
	 * @param int|null $offset the index of the first element to retrieve
	 * @return Mouf\AccountBundle\Entity\OauthClient[]
	 */
	public function findBySecret($fieldValue, $orderBy = null, $limit = null, $offset = null) {
		return $this->findBy(array('secret' => $fieldValue), $orderBy, $limit, $offset);
	}

	/**
	 * Wrapper around the magic __call implementations of the findByOne[Field] function to get autocompletion
	 * @param mixed $fieldValue the value of the filtered field
	 * @param array|null $orderBy the value of the filtered field
	 * @return Mouf\AccountBundle\Entity\OauthClient
	 */
	public function findOneBySecret($fieldValue, $orderBy = null) {
		return $this->findOneBy(array('secret' => $fieldValue), $orderBy);
	}

	/**
	 * Finds only one entity by Secret.
     * Throw an exception if more than one entity was found.
	 * @param mixed $fieldValue the value of the filtered field
	 * @return Mouf\AccountBundle\Entity\OauthClient
	 */
	public function findUniqueBySecret($fieldValue) {
		return $this->findUniqueBy(array('secret' => $fieldValue));
	}
	/**
	 * Wrapper around the magic __call implementations of the findBy[Field] function to get autocompletion
	 * @param mixed $fieldValue the value of the filtered field
	 * @param array|null $orderBy the value of the filtered field
	 * @param int|null $limit the max elements to be returned
	 * @param int|null $offset the index of the first element to retrieve
	 * @return Mouf\AccountBundle\Entity\OauthClient[]
	 */
	public function findByName($fieldValue, $orderBy = null, $limit = null, $offset = null) {
		return $this->findBy(array('name' => $fieldValue), $orderBy, $limit, $offset);
	}

	/**
	 * Wrapper around the magic __call implementations of the findByOne[Field] function to get autocompletion
	 * @param mixed $fieldValue the value of the filtered field
	 * @param array|null $orderBy the value of the filtered field
	 * @return Mouf\AccountBundle\Entity\OauthClient
	 */
	public function findOneByName($fieldValue, $orderBy = null) {
		return $this->findOneBy(array('name' => $fieldValue), $orderBy);
	}

	/**
	 * Finds only one entity by Name.
     * Throw an exception if more than one entity was found.
	 * @param mixed $fieldValue the value of the filtered field
	 * @return Mouf\AccountBundle\Entity\OauthClient
	 */
	public function findUniqueByName($fieldValue) {
		return $this->findUniqueBy(array('name' => $fieldValue));
	}
}